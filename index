#!/usr/bin/env php
<?php

require_once 'Parsedown.php';

class PathResolver
{
	public static function path_to_folder()
	{
		$folders = func_get_args();

		return self::get_absolute_path(implode('/', $folders));
	}

	public static function get_absolute_path($path)
	{
		$path = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, $path);
		$parts = array_filter(explode(DIRECTORY_SEPARATOR, $path), 'strlen');
		$absolutes = array();

		foreach ($parts as $part) {
			if ('.' == $part) continue;
			
			if ('..' == $part) {
				array_pop($absolutes);
			} else {
				$absolutes[] = $part;
			}
		}

		return implode(DIRECTORY_SEPARATOR, $absolutes);
	}
}

class DirectoryScanner extends PathResolver
{
	private $exclude_folders = array('.', '..');
	private $exclude_extensions = array();

	public function __construct($options = array())
	{
		$this->exclude_folders = isset($options['exclude_folders']) ? $options['exclude_folders'] : $this->exclude_folders;
		$this->exclude_extensions = isset($options['exclude_extensions']) ? $options['exclude_extensions'] : $this->exclude_extensions;
	}

	public function scan($root_folder, $callback) {
		$root_folder = self::path_to_folder($root_folder);

		$folders = scandir($root_folder);

		foreach($folders as $folder) {
			$current_path = self::path_to_folder($root_folder, $folder);

			if(is_dir($current_path)) {
				if(in_array($folder, $this->exclude_folders)) {
					continue;
				}

				$callback($folder, $current_path, true);
			} elseif(is_file($current_path)) {
				if(in_array(pathinfo($current_path, PATHINFO_EXTENSION), $this->exclude_extensions)) {
					continue;
				}

				$callback($folder, $current_path, false);
			}
		}
	}

	public function clean($dir, $remove_root = false)
	{
		$this->scan($dir, function ($filename, $path, $is_dir) {
			if($is_dir) {
				$this->clean($path);

				rmdir($path);
			} else {
				unlink($path);
			}
		});

		if($remove_root) {
			rmdir($dir);
		}
	}
}

class View
{
    /**
     * Set data from controller: $view->data['variable'] = 'value';
     * @var array
     */
    public $data = [];

    /**
     * @var sting Path to template file.
     */ 
    function render($template)
    {
        if (!is_file($template)) {
            throw new \RuntimeException('Template not found: ' . $template);
        }

        // define a closure with a scope for the variable extraction
        $result = function($file, array $data = array()) {
            ob_start();
            extract($data, EXTR_SKIP);
            try {
                include $file;
            } catch (\Exception $e) {
                ob_end_clean();
                throw $e;
            }
            return ob_get_clean();
        };

        return $result($template, $this->data);
    }

    function renderString($template)
    {
        $result = function($file, array $data = array()) {
            ob_start();

            extract($data, EXTR_SKIP);

            try {
                eval('?>' . $file);
            } catch (\Exception $e) {
                ob_end_clean();

                throw $e;
            }

            return ob_get_clean();
        };

        return $result($template, $this->data);
    }
}

class Post
{
	private const PARSE_STATE_INITIAL = 0;
	private const PARSE_STATE_META = 1;
	private const PARSE_STATE_EMPTY_LINE = 2;
	private const PARSE_STATE_CONTENT = 3;

	private $filename;
	private $file;
	private $attributes = array();

	private $meta;
	private $content;

	private $post_name_pattern = "/(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2})-(?P<name>[a-zA-Z_-]+)\.(?P<ext>\w+)/";
	private $post_folder_format = "%year/%month/%day";
	private $post_date_format = "%year/%month/%day";
	private $post_filename_format = "%name.html";

	private $file_meta_start = "```json\r\n";
	private $file_meta_end = "```\r\n";

	private $allowed_post_filename_attributes = array(
		'year',
		'month',
		'day',
		'name',
		'ext'
	); 

	public function __construct($options)
	{
		$this->filename = $options['filename'];
		$this->file = file($options['path']);

		$this->parseFilename();
	}

	private function parseFilename()
	{
		preg_match($this->post_name_pattern, $this->filename, $matches);

		foreach($matches as $key => $value) {
			if(in_array($key, $this->allowed_post_filename_attributes)) {
				$this->attributes[$key] = $value;
			}
		}
	}

	public function getFolder()
	{
		$folder = $this->post_folder_format;

		foreach($this->attributes as $key => $value) {
			$folder = str_replace("%$key", $value, $folder);
		}

		return $folder;
	}

	public function getFilename()
	{
		$folder = $this->post_filename_format;

		foreach($this->attributes as $key => $value) {
			$folder = str_replace("%$key", $value, $folder);
		}

		return $folder;
	}

	public function handle()
	{
		$this->parseFile();
	}

	private function parseFile()
	{
		$meta = array();
		$content = array();

		$state = self::PARSE_STATE_INITIAL;

		foreach($this->file as $line) {
			if($line === $this->file_meta_start) {
				$state = self::PARSE_STATE_META;
				
				continue;
			}
			
			if($line === $this->file_meta_end) {
				$state = self::PARSE_STATE_EMPTY_LINE;
				
				continue;
			}

			switch($state) {
				case self::PARSE_STATE_META:
					$meta[] = $line;

					break;
				case self::PARSE_STATE_EMPTY_LINE:
					$state = self::PARSE_STATE_CONTENT;
					
					break;
				case self::PARSE_STATE_CONTENT:
					$content[] = $line;
					
					break;
				default:
					break;
			}
		}

		$this->setMeta(implode("\r\n", $meta));
		$this->setContent(implode("\r\n", $content));
	}

	private function setMeta($meta)
	{
		$this->meta = json_decode($meta, true);
	}

	private function setContent($content)
	{
		$this->content = $content;
	}

	public function getDate()
	{
		$date = $this->post_date_format;

		foreach($this->attributes as $key => $value) {
			$date = str_replace("%$key", $value, $date);
		}

		return $date;
	}
	
	public function getName()
	{
		return $this->attributes['name'];
	}

	public function getContent()
	{
		return $this->content;
	}

	public function getMeta($key = false)
	{
		if($key !== false) {
			return $this->meta[$key];
		}
		
		return $this->meta;
	}

	public function getAttributes()
	{
		return $this->attributes;
	}

	public function getCompiledContent()
	{
		return $this->markdown($this->template());
	}

	public function template()
	{
		$view = new View();

		$view->data['meta'] = $this->getMeta();
		$view->data['attributes'] = $this->getAttributes();
		
		return $view->renderString($this->getContent());
	}

	public function markdown($text)
	{
		$Parsedown = new Parsedown();

		return $Parsedown->text($text);
	}
}

class Blog
{
	private $scanner;
	private $dir_posts;
	private $dir_dist;
	private $dir_layouts;

	private $post_folder_permissions = 0744;

	public function __construct($options)
	{
		$this->dir_posts = $options['dir_posts'];
		$this->dir_dist = $options['dir_dist'];
		$this->dir_layouts = $options['dir_layouts'];
		$this->layout_extension = $options['layout_extension'];

		$this->scanner = $options['scanner'];

		$this->path_resolver = new PathResolver();
	}

	public function build()
	{
		$this->scanner->clean($this->dir_dist, false);

		$this->scanLocales($this->dir_posts);
	}

	private function scanLocales($dir)
	{
		$this->scanner->scan($dir, function ($filename, $path, $is_dir) {
			if($is_dir) {
				$this->createLocale($filename);
			
				$this->scanPosts($path, $filename);
			}
		});
	}

	private function createLocale($locale)
	{
		mkdir($this->path_resolver->path_to_folder($this->dir_dist, $locale));
	}

	private function scanPosts($dir, $locale)
	{
		$this->scanner->scan($dir, function ($filename, $path, $is_dir) use($locale) {
			if(!$is_dir) {
				$this->createPost($locale, $filename, $path);
			}
		});
	}

	private function createPost($locale, $filename, $path)
	{
		$post = new Post(array(
			'filename' => $filename,
			'path' => $path,
		));

		$post_folder = $this->path_resolver->path_to_folder(
			$this->dir_dist,
			$locale,
			$post->getFolder()
		);

		if(!file_exists($post_folder)) {
			mkdir($post_folder, $this->post_folder_permissions, true);
		}

		$post->handle();

		$view = new View();

		$view->data['meta'] = $post->getMeta();
		$view->data['attributes'] = $post->getAttributes();
		$view->data['content'] = $post->getCompiledContent();

		$file_content = $view->render(
			$this->path_resolver->path_to_folder(
				$this->dir_layouts,
				$post->getMeta('layout') . '.' . $this->layout_extension
			)
		);

		file_put_contents($this->path_resolver->path_to_folder($post_folder, $post->getFilename()), $file_content);
	}
}

$blog = new Blog(array(
	'dir_posts' => __DIR__ . "/_posts",
	'dir_dist' => __DIR__ . "/www",
	'dir_layouts' => __DIR__ . "/_layouts",
	'layout_extension' => "php",

	'scanner' => new DirectoryScanner(),
));

$blog->build();

