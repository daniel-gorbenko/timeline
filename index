#!/usr/bin/env php
<?php

class PathResolver
{
	public static function path_to_folder()
	{
		$folders = func_get_args();

		return self::get_absolute_path(implode('/', $folders));
	}

	public static function get_absolute_path($path)
	{
		$path = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, $path);
		$parts = array_filter(explode(DIRECTORY_SEPARATOR, $path), 'strlen');
		$absolutes = array();

		foreach ($parts as $part) {
			if ('.' == $part) continue;
			
			if ('..' == $part) {
				array_pop($absolutes);
			} else {
				$absolutes[] = $part;
			}
		}

		return implode(DIRECTORY_SEPARATOR, $absolutes);
	}
}

class DirectoryScanner extends PathResolver
{
	private $exclude_folders = array('.', '..');
	private $exclude_extensions = array();

	public function __construct($options = array())
	{
		$this->exclude_folders = isset($options['exclude_folders']) ? $options['exclude_folders'] : $this->exclude_folders;
		$this->exclude_extensions = isset($options['exclude_extensions']) ? $options['exclude_extensions'] : $this->exclude_extensions;
	}

	public function scan($root_folder, $callback) {
		$root_folder = self::path_to_folder($root_folder);

		$folders = scandir($root_folder);

		foreach($folders as $folder) {
			$current_path = self::path_to_folder($root_folder, $folder);

			if(is_dir($current_path)) {
				if(in_array($folder, $this->exclude_folders)) {
					continue;
				}

				$callback($folder, $current_path, true);
			} elseif(is_file($current_path)) {
				if(in_array(pathinfo($current_path, PATHINFO_EXTENSION), $this->exclude_extensions)) {
					continue;
				}

				$callback($folder, $current_path, false);
			}
		}
	}

	public function clean($dir, $remove_root = false)
	{
		$this->scan($dir, function ($filename, $path, $is_dir) {
			if($is_dir) {
				$this->clean($path);

				rmdir($path);
			} else {
				unlink($path);
			}
		});

		if($remove_root) {
			rmdir($dir);
		}
	}
}

class Blog
{
	private $scanner;
	private $dir_posts;
	private $dir_dist;

	private $post_folder_permissions = 0744;

	private $allowed_post_filename_options = array(
		'year',
		'month',
		'day',
		'name',
		'ext'
	); 

	private $post_name_pattern = "/(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2})-(?P<name>[a-zA-Z_-]+)\.(?P<ext>\w+)/";

	public function __construct($options)
	{
		$this->dir_posts = $options['dir_posts'];
		$this->dir_dist = $options['dir_dist'];
		$this->scanner = $options['scanner'];

		$this->path_resolver = new PathResolver();
	}

	public function build()
	{
		$this->scanner->clean($this->dir_dist, false);

		$this->scanLocales($this->dir_posts);
	}

	private function scanLocales($dir)
	{
		$this->scanner->scan($dir, function ($filename, $path, $is_dir) {
			if($is_dir) {
				$this->createLocale($filename);
			
				$this->scanPosts($path, $filename);
			}
		});
	}

	private function scanPosts($dir, $locale)
	{
		$this->scanner->scan($dir, function ($filename, $path, $is_dir) use($locale) {
			if(!$is_dir) {
				$this->createPost($locale, $filename, $path);
			}
		});
	}

	private function createLocale($locale)
	{
		mkdir($this->path_resolver->path_to_folder($this->dir_dist, $locale));
	}

	private function createPost($locale, $filename, $path)
	{
		$parsed_post_name = $this->parsePostFilename($filename);

		$post_folder = $this->path_resolver->path_to_folder(
			$this->dir_dist,
			$locale,
			$parsed_post_name['year'],
			$parsed_post_name['month'],
			$parsed_post_name['day']
		);

		if(!file_exists($post_folder)) {
			mkdir($post_folder, $this->post_folder_permissions, true);
		}

		$content = file_get_contents($path);

		file_put_contents($this->path_resolver->path_to_folder($post_folder, $parsed_post_name['name']), $content);
	}

	private function parsePostFilename($filename)
	{
		preg_match($this->post_name_pattern, $filename, $matches);

		$data = array();

		foreach($matches as $key => $value) {
			if(in_array($key, $this->allowed_post_filename_options)) {
				$data[$key] = $value;
			}
		}

		return $data;
	}
}

$blog = new Blog(array(
	'dir_posts' => __DIR__ . "/_posts",
	'dir_dist' => __DIR__ . "/www",

	'scanner' => new DirectoryScanner(),
));

$blog->build();

